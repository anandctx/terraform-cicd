# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: envName
    displayName: select environment to provision
    default: dev
    values: 
      - dev
      - qa
      - sit
      - uat
      - prod
  - name: TF_operation
    displayName: select TF operation
    default: deploy
    values:
      - Deploy
      - destroy
resources:
  repositories:
    - repository: pipelinetestrepo
      type: github
      name: anandctx/pipelinetestswap
      endpoint: 'terraform-cicd-nov21'
      ref: refs/heads/feature1



############
stages:
  - stage: Build
    displayName: TF Build
    jobs:
      - job: Build
        steps: 
        - checkout: pipelinetestrepo
          path: pipelinetestrepo
        - checkout: self 
          path: self
        - task: CopyFiles@2
          displayName: copy files of nsg
          inputs:
            SourceFolder: '$(pipeline.workspace)/self/nsg_2'
            Contents: '**'
            TargetFolder: '$(build.artifactstagingdirectory)/terraform'

        - task: CopyFiles@2
          displayName: copy files of the RG
          inputs:
            SourceFolder: '$(pipeline.workspace)/pipelinetestrepo'
            Contents: '**'
            TargetFolder: '$(build.artifactstagingdirectory)/terraform'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/terraform'
            ArtifactName: 'drop'
            
            publishLocation: 'Container'
            
##########
  - stage: terraform_deploy
    displayName: 'provision ${{parameters.envName}} environment'
    dependsOn: [Build]
    # condition: eq( parameters['TF_operation'] , 'Deploy')
    jobs:
      - job: 
        displayName: provision ${{parameters.envName}} environment
        steps:
          - task: DownloadBuildArtifacts@1
            displayName: download the build arti from CI
            inputs:
               buildType: 'current'
               downloadType: 'single'
               artifactName: 'drop'
               downloadPath: '$(System.ArtifactsDirectory)/terraform'

          - task: TerraformInstaller@1
            displayName: Install terra
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init_hey
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'cicd-terraform-svc-nov22'
              backendAzureRmResourceGroupName: 'ibo-rg'
              backendAzureRmStorageAccountName: 'terradeploy00981'
              backendAzureRmContainerName: 'terracontainer'
              backendAzureRmKey: 'nov22state'
              workingDirectory: '$(System.ArtifactsDirectory)/terraform/drop'
              
          - task: TerraformTaskV4@4
            displayName: validate_hey
            inputs:
               provider: 'azurerm'
               command: 'validate'
               workingDirectory: '$(System.ArtifactsDirectory)/terraform/drop'

          - task: TerraformTaskV4@4
            displayName: plan_hey
            inputs:
               provider: 'azurerm'
               command: 'plan'
               workingDirectory: '$(System.ArtifactsDirectory)/terraform/drop'
               environmentServiceNameAzureRM: 'cicd-terraform-svc-nov22'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'cicd-terraform-svc-nov22'
              workingDirectory: '$(System.ArtifactsDirectory)/terraform/drop'





